ctx = '.row__col'

calc_columns(colNumber)
    unit(((colNumber / total_columns) * 100), '%')

/*
* creates a column, should be used inside of a media query to control layouts
*
* columns - the number of columns this should be
* offset  - # of columns to offset, default: false
*/
column(columns = false, offset = false)

    padding-left:   remify(col_padding)
    padding-right:  remify(col_padding)
    box-sizing:     border-box
    display:        flex
    flex-direction: column
    flex-grow:      0
    flex-shrink:    0

    if columns
        flex-basis: calc_columns(columns)
        max-width:  calc_columns(columns)

    if offset
        margin-left: calc_columns(offset)

col_base_classes(size)

    // normal col
    // {s,m,l}w = {small, medium, large} width
    for i in (1..total_columns)
        {ctx}_{size}w_{i}
            column(columns: i)

    // offset col
    // {s,m,l}o = {small, medium, large} offset
    for i in (1..total_columns - 1)
        {ctx}_{size}o_{i}
            column(offset: i)

    // auto size col
    {ctx}_{size}
        flex-grow:  1
        flex-basis: 0
        max-width:  100%

col_order_classes(size)

    // {s,m,l}of = {small, medium, large} order first
    {ctx}_{size}of
        order: -1

    // {s,m,l}ol = {small, medium, large} order last
    {ctx}_{size}ol
        order: 1

col_visibility_classes(size)

    {ctx}_{size}w_0
        display: none

{ctx}
    column(columns: total_columns)

@media small
    col_base_classes(s)
    col_order_classes(s)

@media small_only
    col_visibility_classes(s)

@media medium
    col_base_classes(m)
    col_order_classes(m)

@media medium_only
    col_visibility_classes(m)

@media large
    col_base_classes(l)
    col_order_classes(l)

@media large_only
    col_visibility_classes(l)

@media xlarge
    col_base_classes(xl)
    col_order_classes(xl)

@media xlarge_only
    col_visibility_classes(xl)

@media xxlarge
    col_base_classes(xxl)
    col_order_classes(xxl)

@media xxlarge_only
    col_visibility_classes(xxl)
